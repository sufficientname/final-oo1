TestCase subclass: #CooperativeTest	instanceVariableNames: 'cooperative student member fee paymentMethod payment otherStudent otherMember otherFee otherPaymentMethod otherPayment'	classVariableNames: ''	package: 'Cooperative-Tests'!!CooperativeTest methodsFor: 'running' stamp: 'Anonymous 4/16/2020 13:55'!testCalculateIncomeBetweenAnd	cooperative newPayment: payment.	cooperative newPayment: otherPayment.	" fake payment datePaid "	payment datePaid: Date yesterday.		self assert: (cooperative calculateIncomeBetween: Date yesterday and: Date yesterday) equals: payment amountAfterCommision.	 self assert: (cooperative calculateIncomeBetween: Date yesterday and: Date today) equals: (payment amountAfterCommision + otherPayment amountAfterCommision).	self assert: (cooperative calculateIncomeBetween: Date today onPreviousMonth and: Date today onPreviousMonth) equals: 0.	! !!CooperativeTest methodsFor: 'running' stamp: 'Anonymous 4/16/2020 13:39'!testNewStudent	cooperative newStudent: student.	self assert: cooperative students size equals: 1.	self assertCollection: cooperative students includesAll: { student }! !!CooperativeTest methodsFor: 'running' stamp: 'Anonymous 4/16/2020 14:07'!testUpToDateMembers	| enrollmentFee |	cooperative newMember: member.	cooperative newMember: otherMember.		self assert: cooperative upToDateMembers isEmpty.		" member pays enrollment fee "	enrollmentFee := EnrollmentFee amount: 200.	cooperative newFee: enrollmentFee.	cooperative newPayment: (Payment member: member fee: enrollmentFee paymentMethod: paymentMethod).		" still not up to date "	self assert: cooperative upToDateMembers isEmpty.		" member pays monthly fees "	1 to: Month current index do: [ :each |		| monthlyFee |		monthlyFee := MonthlyFee amount: 100 month: (Month month: each).		cooperative newFee: monthlyFee.		cooperative newPayment: (Payment member: member fee: monthlyFee paymentMethod: paymentMethod).	].			" now is up to date "	self assert: cooperative upToDateMembers size equals: 1.	self assert: (cooperative upToDateMembers includes: member)! !!CooperativeTest methodsFor: 'running' stamp: 'Anonymous 4/16/2020 13:40'!testNewFee	cooperative newFee: fee.	self assert: cooperative fees size equals: 1.	self assertCollection: cooperative fees includesAll: { fee }! !!CooperativeTest methodsFor: 'running' stamp: 'Anonymous 4/16/2020 13:22'!testInitialize	| aCooperative |	aCooperative := Cooperative new.	self assert: aCooperative paymentMethods isEmpty.	self assert: aCooperative fees isEmpty.	self assert: aCooperative students isEmpty.	self assert: aCooperative payments isEmpty.! !!CooperativeTest methodsFor: 'running' stamp: 'Anonymous 4/16/2020 13:25'!testFees	self assert: cooperative fees isEmpty.	cooperative newFee: fee.	cooperative newFee: otherFee.	self assert: cooperative fees size equals: 2.	self assertCollection: cooperative fees includesAll: { fee. otherFee }! !!CooperativeTest methodsFor: 'running' stamp: 'Anonymous 4/16/2020 13:26'!testMembers	self assert: cooperative members isEmpty.	cooperative newMember: member.	cooperative newMember: otherMember.	self assert: cooperative members size equals: 2.	self assertCollection: cooperative members includesAll: { member. otherMember }! !!CooperativeTest methodsFor: 'running' stamp: 'Anonymous 4/16/2020 13:37'!setUp	member := Member name: 'John Doe' dni: 20100100 phoneNumber: 2215558888.	student := Student name: 'Bob Doe' dni: 40100100 grade: 1 division: 1.	fee := Fee amount: 100.	paymentMethod := PaymentMethod name: 'credit card' commission: 10.	payment := Payment member: member fee: fee paymentMethod: paymentMethod.		otherMember := Member name: 'Jane Doe' dni: 20200200 phoneNumber: 2216669999.	otherStudent := Student name: 'Bill Doe' dni: 40200200 grade: 1 division: 1.	otherFee := Fee amount: 200.	otherPaymentMethod := PaymentMethod name: 'debit card' commission: 10.	otherPayment := Payment member: member fee: fee paymentMethod: paymentMethod.		cooperative := Cooperative new.! !!CooperativeTest methodsFor: 'running' stamp: 'Anonymous 4/16/2020 13:31'!testPaymentMethods	self assert: cooperative paymentMethods isEmpty.	cooperative newPaymentMethod: paymentMethod.	cooperative newPaymentMethod: otherPaymentMethod.	self assert: cooperative paymentMethods size equals: 2.	self assertCollection: cooperative paymentMethods includesAll: { paymentMethod. otherPaymentMethod }! !!CooperativeTest methodsFor: 'running' stamp: 'Anonymous 4/16/2020 13:28'!testPayments	self assert: cooperative payments isEmpty.	cooperative newPayment: payment.	cooperative newPayment: otherPayment.	self assert: cooperative payments size equals: 2.	self assertCollection: cooperative payments includesAll: { payment. otherPayment }! !!CooperativeTest methodsFor: 'running' stamp: 'Anonymous 4/16/2020 13:38'!testStudents	self assert: cooperative students isEmpty.	cooperative newStudent: student.	cooperative newStudent: otherStudent.	self assert: cooperative students size equals: 2.	self assertCollection: cooperative students includesAll: { student. otherStudent }! !!CooperativeTest methodsFor: 'running' stamp: 'Anonymous 4/16/2020 13:41'!testNewPayment	cooperative newPayment: payment.	self assert: cooperative payments size equals: 1.	self assertCollection: cooperative payments includesAll: { payment }.	self assert: payment datePaid equals: Date today.! !!CooperativeTest methodsFor: 'running' stamp: 'Anonymous 4/16/2020 13:42'!testNewPaymentMethod	cooperative newPaymentMethod: paymentMethod.	self assert: cooperative paymentMethods size equals: 1.	self assertCollection: cooperative paymentMethods includesAll: { paymentMethod }! !!CooperativeTest methodsFor: 'running' stamp: 'Anonymous 4/16/2020 13:47'!testNewMember	cooperative newMember: member.	self assert: cooperative members size equals: 1.	self assertCollection: cooperative members includesAll: { member }.	self assert: member number equals: cooperative members size! !TestCase subclass: #EnrollmentFeeTest	instanceVariableNames: 'fee'	classVariableNames: ''	package: 'Cooperative-Tests'!!EnrollmentFeeTest methodsFor: 'running' stamp: 'Anonymous 4/16/2020 14:26'!setUp	fee := EnrollmentFee amount: 200.! !!EnrollmentFeeTest methodsFor: 'running' stamp: 'Anonymous 4/16/2020 14:26'!testIsEnrollmentFee	self assert: fee isEnrollmentFee.	self assert: fee isMonthlyFee not.! !TestCase subclass: #FeeTest	instanceVariableNames: 'fee'	classVariableNames: ''	package: 'Cooperative-Tests'!!FeeTest methodsFor: 'running' stamp: 'Anonymous 4/16/2020 14:22'!testIsMonthlyFee	self assert: fee isMonthlyFee not! !!FeeTest methodsFor: 'running' stamp: 'Anonymous 4/16/2020 15:08'!testAmount	fee amount: 100.	self assert: fee amount equals: 100.! !!FeeTest methodsFor: 'running' stamp: 'Anonymous 4/16/2020 17:54'!testPayments	| payment |	payment := Payment new.	self assert: fee payments isEmpty.	fee addPayment: payment.	self assert: fee payments size equals: 1.	self assertCollection: fee payments includesAll: { payment }.! !!FeeTest methodsFor: 'running' stamp: 'Anonymous 4/16/2020 14:18'!setUp	fee := Fee amount: 100! !!FeeTest methodsFor: 'running' stamp: 'Anonymous 4/16/2020 17:56'!testInitialize	| aFee |	aFee := Fee new.	self assert: fee payments isEmpty! !!FeeTest methodsFor: 'running' stamp: 'Anonymous 4/16/2020 17:51'!testAddPayment	| payment |	payment := Payment new.	self assert: fee payments isEmpty.	fee addPayment: payment.	self assert: fee payments size equals: 1.	self assertCollection: fee payments includesAll: { payment }.	self assert: payment fee equals: fee	! !!FeeTest methodsFor: 'running' stamp: 'Anonymous 4/16/2020 14:19'!testIsEnrollmentFee	self assert: fee isEnrollmentFee not! !!FeeTest methodsFor: 'running' stamp: 'Anonymous 4/16/2020 17:53'!testRemovePayment	| payment |	payment := Payment new.	fee addPayment: payment.	fee removePayment: payment.	self assert: fee payments isEmpty.	self assert: payment fee equals: nil	! !TestCase subclass: #MemberTest	instanceVariableNames: 'member student otherStudent'	classVariableNames: ''	package: 'Cooperative-Tests'!!MemberTest methodsFor: 'running' stamp: 'Anonymous 4/16/2020 15:16'!testNameDniPhoneNumber	| aMember |	aMember := Member name: 'John Doe' dni: 20100100 phoneNumber: 2215558888.	self assert: aMember name equals: 'John Doe'.	self assert: aMember dni equals: 20100100.	self assert: aMember phoneNumber equals: 2215558888! !!MemberTest methodsFor: 'running' stamp: 'Anonymous 4/16/2020 15:18'!testPhoneNumber	member phoneNumber: 2215558888.	self assert: member phoneNumber equals: 2215558888 ! !!MemberTest methodsFor: 'running' stamp: 'Anonymous 4/16/2020 15:52'!testBeNotResponsibleOf	member beResponsibleOf: student.	member beNotResponsibleOf: student.	self assert: member responsibleOf isEmpty.	self assert: student responsibles isEmpty.! !!MemberTest methodsFor: 'running' stamp: 'Anonymous 4/16/2020 18:16'!testAddPayment	| payment |	payment := Payment new.	self assert: member payments isEmpty.	member addPayment: payment.	self assert: member payments size equals: 1.	self assertCollection: member payments includesAll: { payment }.	self assert: payment member equals: member	! !!MemberTest methodsFor: 'running' stamp: 'Anonymous 4/16/2020 18:13'!testInitialize	| aMember |	aMember := Member new.	self assert: aMember responsibleOf isEmpty.	self assert: aMember payments isEmpty.! !!MemberTest methodsFor: 'running' stamp: 'Anonymous 4/16/2020 15:17'!setUp	member := Member name: 'John Doe' dni: 20100100 phoneNumber: 2215558888.	student := Student name: 'Bob Doe' dni: 40100100 grade: 1 division: 1.	otherStudent := Student name: 'Bill Doe' dni: 40200200 grade: 1 division: 1.! !!MemberTest methodsFor: 'running' stamp: 'Anonymous 4/16/2020 15:24'!testResponsibleOf	self assert: member responsibleOf isEmpty.	member beResponsibleOf: student.	member beResponsibleOf: otherStudent.	self assert: member responsibleOf size equals: 2.	self assertCollection: member responsibleOf includesAll: { student. otherStudent }.	self assert: student responsibles size equals: 1.	self assertCollection: student responsibles includesAll: { member }.	self assert: otherStudent responsibles size equals: 1.	self assertCollection: otherStudent responsibles includesAll: { member }.	! !!MemberTest methodsFor: 'running' stamp: 'Anonymous 4/16/2020 15:18'!testNumber	member number: 1.	self assert: member number equals: 1! !!MemberTest methodsFor: 'running' stamp: 'Anonymous 4/16/2020 18:15'!testPayments	| payment |	payment := Payment new.	self assert: member payments isEmpty.	member addPayment: payment.	self assert: member payments size equals: 1.	self assertCollection: member payments includesAll: { payment }.! !!MemberTest methodsFor: 'running' stamp: 'Anonymous 4/16/2020 18:16'!testRemovePayment	| payment |	payment := Payment new.	member addPayment: payment.	member removePayment: payment.	self assert: member payments isEmpty.	self assert: payment member equals: nil	! !!MemberTest methodsFor: 'running' stamp: 'Anonymous 4/16/2020 15:38'!testUpToDate	| cooperative paymentMethod enrollmentFee |	cooperative := Cooperative new.	paymentMethod := PaymentMethod name: 'credit card' commission: 10.		" member pays enrollment fee "	enrollmentFee := EnrollmentFee amount: 200.		cooperative newFee: enrollmentFee.	cooperative newPayment: (Payment member: member fee: enrollmentFee paymentMethod: paymentMethod).		" still not up to date "	self assert: member upToDate not.		" member pays monthly fees "	1 to: Month current index do: [ :each |		| monthlyFee |		monthlyFee := MonthlyFee amount: 100 month: (Month month: each).		cooperative newFee: monthlyFee.		cooperative newPayment: (Payment member: member fee: monthlyFee paymentMethod: paymentMethod).	].			" now is up to date "	self assert: member upToDate.! !!MemberTest methodsFor: 'running' stamp: 'Anonymous 4/16/2020 15:29'!testBeResponsibleOf	member beResponsibleOf: student.	self assert: member responsibleOf size equals: 1.	self assertCollection: member responsibleOf includesAll: { student }.	self assert: student responsibles size equals: 1.	self assertCollection: student responsibles includesAll: { member }.! !TestCase subclass: #MonthlyFeeTest	instanceVariableNames: 'fee'	classVariableNames: ''	package: 'Cooperative-Tests'!!MonthlyFeeTest methodsFor: 'running' stamp: 'Anonymous 4/16/2020 14:24'!setUp	fee := MonthlyFee amount: 100 month: Month january.! !!MonthlyFeeTest methodsFor: 'running' stamp: 'Anonymous 4/16/2020 14:29'!testAmountMonth	| aFee |	aFee := MonthlyFee amount: 200 month: Month january.	self assert: aFee amount equals: 200.	self assert: aFee month equals: Month january! !!MonthlyFeeTest methodsFor: 'running' stamp: 'Anonymous 4/16/2020 15:08'!testMonth	fee month: Month january.	self assert: fee month equals: Month january.		! !!MonthlyFeeTest methodsFor: 'running' stamp: 'Anonymous 4/16/2020 15:09'!testIsMonthlyFee	self assert: fee isMonthlyFee.	self assert: fee isEnrollmentFee not.! !TestCase subclass: #PaymentListenerTest	instanceVariableNames: ''	classVariableNames: ''	package: 'Cooperative-Tests'!!PaymentListenerTest methodsFor: 'running' stamp: 'Anonymous 4/16/2020 16:13'!testAddPayment	| paymentListener payment |	payment := Payment new.	paymentListener := Fee new.	self assert: paymentListener payments isEmpty.	paymentListener addPayment: payment.	self assert: paymentListener payments size equals: 1.	self assertCollection: paymentListener payments includesAll: { payment } ! !!PaymentListenerTest methodsFor: 'running' stamp: 'Anonymous 4/16/2020 16:13'!testRemovePayment	| paymentListener payment |	payment := Payment new.	paymentListener := Fee new.	paymentListener addPayment: payment.	paymentListener removePayment: payment.	self assert: paymentListener payments isEmpty. ! !!PaymentListenerTest methodsFor: 'running' stamp: 'Anonymous 4/16/2020 16:12'!testPayments	| paymentListener payment |	payment := Payment new.	paymentListener := Fee new.	self assert: paymentListener payments isEmpty.	paymentListener addPayment: payment.	self assert: paymentListener payments size equals: 1.	self assertCollection: paymentListener payments includesAll: { payment } 	! !TestCase subclass: #PaymentMethodTest	instanceVariableNames: 'paymentMethod'	classVariableNames: ''	package: 'Cooperative-Tests'!!PaymentMethodTest methodsFor: 'running' stamp: 'Anonymous 4/16/2020 18:19'!testRemovePayment	| payment |	payment := Payment new.	paymentMethod addPayment: payment.	paymentMethod removePayment: payment.	self assert: paymentMethod payments isEmpty.	self assert: payment paymentMethod equals: nil	! !!PaymentMethodTest methodsFor: 'running' stamp: 'Anonymous 4/16/2020 18:14'!testInitialize	| aPaymentMethod |	aPaymentMethod := PaymentMethod new.	self assert: aPaymentMethod payments isEmpty.	! !!PaymentMethodTest methodsFor: 'running' stamp: 'Anonymous 4/16/2020 18:18'!testPayments	| payment |	payment := Payment new.	self assert: paymentMethod payments isEmpty.	paymentMethod addPayment: payment.	self assert: paymentMethod payments size equals: 1.	self assertCollection: paymentMethod payments includesAll: { payment }.! !!PaymentMethodTest methodsFor: 'running' stamp: 'Anonymous 4/16/2020 14:56'!setUp	paymentMethod := PaymentMethod name: 'credit card' commission: 10! !!PaymentMethodTest methodsFor: 'running' stamp: 'Anonymous 4/16/2020 15:09'!testName	paymentMethod name: 'credit card'.	self assert: paymentMethod name equals: 'credit card'.! !!PaymentMethodTest methodsFor: 'running' stamp: 'Anonymous 4/16/2020 15:09'!testCommission	paymentMethod commission: 10.	self assert: paymentMethod commission equals: 10.! !!PaymentMethodTest methodsFor: 'running' stamp: 'Anonymous 4/16/2020 18:18'!testAddPayment	| payment |	payment := Payment new.	self assert: paymentMethod payments isEmpty.	paymentMethod addPayment: payment.	self assert: paymentMethod payments size equals: 1.	self assertCollection: paymentMethod payments includesAll: { payment }.	self assert: payment paymentMethod equals: paymentMethod	! !!PaymentMethodTest methodsFor: 'running' stamp: 'Anonymous 4/16/2020 15:01'!testNameCommission	| aPaymentMethod |	aPaymentMethod := PaymentMethod name: 'credit card' commission: 10.	self assert: aPaymentMethod name equals: 'credit card'.	self assert: aPaymentMethod commission equals: 10.! !TestCase subclass: #PaymentTest	instanceVariableNames: 'member fee paymentMethod payment otherMember otherFee otherPaymentMethod'	classVariableNames: ''	package: 'Cooperative-Tests'!!PaymentTest methodsFor: 'running' stamp: 'Anonymous 4/16/2020 13:04'!testDatePaid	| datePaid |	datePaid := Date today.	payment datePaid: datePaid.	self assert: payment datePaid equals: datePaid.! !!PaymentTest methodsFor: 'running' stamp: 'Anonymous 4/16/2020 15:10'!testAmountAfterCommision	self assert: payment amountAfterCommision equals: (fee amount * (100 - paymentMethod commission) / 100) ! !!PaymentTest methodsFor: 'running' stamp: 'Anonymous 4/16/2020 12:40'!testAmount	| feeAmount |	self assert: payment amount equals: fee amount.	" if fee amount is updated... "	feeAmount := fee amount.	fee amount: 20.	self assert: payment amount equals: feeAmount.	! !!PaymentTest methodsFor: 'running' stamp: 'Anonymous 4/16/2020 13:08'!testMemberFeePaymentMethod	| otherPayment |	otherPayment := Payment member: otherMember fee: otherFee paymentMethod: otherPaymentMethod.	self assert: otherPayment member equals: otherMember.	self assert: otherPayment fee equals: otherFee.	self assert: otherPayment paymentMethod equals: otherPaymentMethod.! !!PaymentTest methodsFor: 'running' stamp: 'Anonymous 4/16/2020 15:09'!testCommission	| paymentMethodCommission |	self assert: payment commission equals: paymentMethod commission.	" if paymentMethod commission is updated... "	paymentMethodCommission := paymentMethod commission.	paymentMethod commission: 20.	self assert: payment commission equals: paymentMethodCommission.	! !!PaymentTest methodsFor: 'running' stamp: 'Anonymous 4/16/2020 12:52'!testInitialize	| aPayment |	aPayment := Payment new.	self assert: aPayment amount equals: 0.	self assert: aPayment commission equals: 0.! !!PaymentTest methodsFor: 'running' stamp: 'Anonymous 4/16/2020 18:26'!testMember	payment member: member.	self assert: payment member equals: member.	self assert: (member payments includes: payment).	payment member: otherMember.	self assert: payment member equals: otherMember.	self assert: (member payments includes: payment) not.	self assert: (otherMember payments includes: payment).	payment member: nil.	self assert: payment member equals: nil.	self assert: (otherMember payments includes: payment) not.! !!PaymentTest methodsFor: 'running' stamp: 'Anonymous 4/16/2020 13:39'!setUp	member := Member name: 'John Doe' dni: 20100100 phoneNumber: 2215558888.	fee := Fee amount: 100.	paymentMethod := PaymentMethod name: 'credit card' commission: 10.		payment := Payment member: member fee: fee paymentMethod: paymentMethod.		otherMember := Member name: 'Jane Doe' dni: 20200200 phoneNumber: 2216669999.	otherFee := Fee amount: 200.	otherPaymentMethod := PaymentMethod name: 'debit card' commission: 10.		! !!PaymentTest methodsFor: 'running' stamp: 'Anonymous 4/16/2020 17:24'!testFee	payment fee: fee.	self assert: payment fee equals: fee.	self assert: payment amount equals: fee amount.	self assert: (fee payments includes: payment).	payment fee: otherFee.	self assert: payment fee equals: otherFee.	self assert: payment amount equals: otherFee amount.	self assert: (fee payments includes: payment) not.	self assert: (otherFee payments includes: payment).	payment fee: nil.	self assert: payment fee equals: nil.	self assert: payment amount equals: 0 .	self assert: (otherFee payments includes: payment) not.! !!PaymentTest methodsFor: 'running' stamp: 'Anonymous 4/16/2020 18:26'!testPaymentMethod	payment paymentMethod: paymentMethod.	self assert: payment paymentMethod equals: paymentMethod.	self assert: payment commission equals: paymentMethod commission.	self assert: (paymentMethod payments includes: payment).	payment paymentMethod: otherPaymentMethod.	self assert: payment paymentMethod equals: otherPaymentMethod.	self assert: payment commission equals: otherPaymentMethod commission.	self assert: (paymentMethod payments includes: payment) not.	self assert: (otherPaymentMethod payments includes: payment).	payment paymentMethod: nil.	self assert: payment paymentMethod equals: nil.	self assert: payment commission equals: 0 .	self assert: (otherPaymentMethod payments includes: payment) not.	! !TestCase subclass: #PersonTest	instanceVariableNames: 'person'	classVariableNames: ''	package: 'Cooperative-Tests'!!PersonTest methodsFor: 'running' stamp: 'Anonymous 4/16/2020 15:05'!setUp	person := Person name: 'John Doe' dni: 20100100.! !!PersonTest methodsFor: 'running' stamp: 'Anonymous 4/16/2020 15:07'!testName	person name: 'John Doe'.	self assert: person name equals: 'John Doe' ! !!PersonTest methodsFor: 'running' stamp: 'Anonymous 4/16/2020 15:07'!testDni	person dni: 20100100.	self assert: person dni equals: 20100100 ! !!PersonTest methodsFor: 'running' stamp: 'Anonymous 4/16/2020 15:13'!testNameDni	| aPerson |	aPerson := Person name: 'John Doe' dni: 20100100.	self assert: aPerson name equals: 'John Doe'.	self assert: aPerson dni equals: 20100100! !TestCase subclass: #StudentTest	instanceVariableNames: 'student member otherMember'	classVariableNames: ''	package: 'Cooperative-Tests'!!StudentTest methodsFor: 'running' stamp: 'Anonymous 4/16/2020 15:50'!testAddResponsible	student addResponsible: member.	self assert: student responsibles size equals: 1.	self assertCollection: student responsibles includesAll: { member }.	self assert: member responsibleOf size equals: 1.	self assertCollection: member responsibleOf includesAll: { student }.	! !!StudentTest methodsFor: 'running' stamp: 'Anonymous 4/16/2020 15:44'!testInitialize	| aStudent |	aStudent := Student new.	self assert: aStudent responsibles isEmpty! !!StudentTest methodsFor: 'running' stamp: 'Anonymous 4/16/2020 15:51'!testRemoveResponsible	student addResponsible: member.	student removeResponsible: member.	self assert: student responsibles isEmpty.	self assert: member responsibleOf isEmpty.	! !!StudentTest methodsFor: 'running' stamp: 'Anonymous 4/16/2020 15:43'!testNameDniGradeDivision	| aStudent |	aStudent := Student name: 'Bob Doe' dni: 40100100 grade: 1 division: 1.	self assert: aStudent name equals: 'Bob Doe'.	self assert: aStudent dni equals: 40100100.	self assert: aStudent grade equals: 1.	self assert: aStudent division equals: 1.! !!StudentTest methodsFor: 'running' stamp: 'Anonymous 4/16/2020 15:43'!testDivision	student division: 1.	self assert: student division equals: 1.! !!StudentTest methodsFor: 'running' stamp: 'Anonymous 4/16/2020 15:48'!setUp	student := Student name: 'Bob Doe' dni: 40100100 grade: 1 division: 1.		member := Member name: 'John Doe' dni: 20100100 phoneNumber: 2215558888.	otherMember := Member name: 'Jane Doe' dni: 20200200 phoneNumber: 2216669999.! !!StudentTest methodsFor: 'running' stamp: 'Anonymous 4/16/2020 15:44'!testGrade	student grade: 1.	self assert: student grade equals: 1.! !!StudentTest methodsFor: 'running' stamp: 'Anonymous 4/16/2020 18:28'!testResponsibles	self assert: student responsibles isEmpty.	student addResponsible: member.	student addResponsible: otherMember.	self assert: student responsibles size equals: 2.	self assertCollection: student responsibles includesAll: { member. otherMember }.	self assert: member responsibleOf size equals: 1.	self assertCollection: member responsibleOf includesAll: { student }.	self assert: otherMember responsibleOf size equals: 1.	self assertCollection: otherMember responsibleOf includesAll: { student }.	! !