Object subclass: #Cooperative	instanceVariableNames: 'paymentMethods fees students members payments'	classVariableNames: ''	package: 'Cooperative-Model'!!Cooperative methodsFor: 'accessing' stamp: 'Anonymous 4/12/2020 04:41'!calculateIncomeBetween: startDate and: endDate	^ (payments select: [ :each | each datePaid between: startDate and: endDate ]) inject: 0 into: [ :sum :each | sum + each amountAfterCommision ]! !!Cooperative methodsFor: 'accessing' stamp: 'Anonymous 4/12/2020 00:40'!newPayment: aPayment 	aPayment datePaid: Date today.	payments add: aPayment	 ! !!Cooperative methodsFor: 'accessing' stamp: 'Anonymous 4/9/2020 23:16'!members	^ members! !!Cooperative methodsFor: 'accessing' stamp: 'Anonymous 4/9/2020 14:53'!fees	^ fees! !!Cooperative methodsFor: 'accessing' stamp: 'Anonymous 4/8/2020 01:38'!newPaymentMethod: aPaymentMethod 	paymentMethods add: aPaymentMethod! !!Cooperative methodsFor: 'accessing' stamp: 'Anonymous 4/12/2020 03:11'!upToDateMembers	^ members select: [ :each | each upToDate ]! !!Cooperative methodsFor: 'accessing' stamp: 'Anonymous 4/10/2020 17:30'!payments	^ payments! !!Cooperative methodsFor: 'accessing' stamp: 'Anonymous 4/16/2020 13:47'!newMember: aMember	members add: aMember.	aMember number: members size	! !!Cooperative methodsFor: 'accessing' stamp: 'Anonymous 4/9/2020 17:11'!newStudent: aStudent	students add: aStudent! !!Cooperative methodsFor: 'accessing' stamp: 'Anonymous 4/8/2020 01:37'!paymentMethods	^ paymentMethods! !!Cooperative methodsFor: 'accessing' stamp: 'Anonymous 4/9/2020 17:11'!students	^ students! !!Cooperative methodsFor: 'accessing' stamp: 'Anonymous 4/9/2020 14:40'!newFee: aFee	fees add: aFee! !!Cooperative methodsFor: 'initialization' stamp: 'Anonymous 4/10/2020 17:31'!initialize	super initialize.	paymentMethods := Set new.	fees := Set new.	students := Set new.	members := Set new.	payments := Set new.! !Object subclass: #Fee	instanceVariableNames: 'amount payments'	classVariableNames: ''	package: 'Cooperative-Model'!!Fee methodsFor: 'accessing' stamp: 'Anonymous 4/9/2020 14:56'!isMonthlyFee	^ false! !!Fee methodsFor: 'accessing' stamp: 'Anonymous 4/9/2020 14:55'!isEnrollmentFee	^ false! !!Fee methodsFor: 'accessing' stamp: 'Anonymous 4/9/2020 04:55'!amount	^ amount! !!Fee methodsFor: 'accessing' stamp: 'Anonymous 4/16/2020 18:06'!addPayment: aPayment	payments add: aPayment.	(aPayment fee == self) ifFalse: [ aPayment fee: self ]! !!Fee methodsFor: 'accessing' stamp: 'Anonymous 4/11/2020 23:21'!amount: anObject	amount := anObject asNumber! !!Fee methodsFor: 'accessing' stamp: 'Anonymous 4/16/2020 17:07'!payments	^ payments! !!Fee methodsFor: 'accessing' stamp: 'Anonymous 4/16/2020 18:08'!removePayment: aPayment	payments remove: aPayment.	(aPayment fee == self) ifTrue: [ aPayment fee: nil ]! !!Fee methodsFor: 'initialization' stamp: 'Anonymous 4/16/2020 17:07'!initialize	super initialize.	payments := Set new.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Fee class	instanceVariableNames: ''!!Fee class methodsFor: 'instance creation' stamp: 'Anonymous 4/9/2020 05:30'!amount: anAmount	^ (self new) amount: anAmount; yourself! !Fee subclass: #EnrollmentFee	instanceVariableNames: ''	classVariableNames: ''	package: 'Cooperative-Model'!!EnrollmentFee methodsFor: 'accessing' stamp: 'Anonymous 4/11/2020 00:20'!printString	^ 'Enrollment Fee'! !!EnrollmentFee methodsFor: 'accessing' stamp: 'Anonymous 4/9/2020 14:56'!isEnrollmentFee	 ^ true! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!EnrollmentFee class	instanceVariableNames: ''!Fee subclass: #MonthlyFee	instanceVariableNames: 'month'	classVariableNames: ''	package: 'Cooperative-Model'!!MonthlyFee methodsFor: 'accessing' stamp: 'Anonymous 4/9/2020 04:54'!month	^ month! !!MonthlyFee methodsFor: 'accessing' stamp: 'Anonymous 4/9/2020 04:54'!month: anObject	month := anObject! !!MonthlyFee methodsFor: 'accessing' stamp: 'Anonymous 4/12/2020 00:37'!printString	"^ 'Monthly Fee(' , month printString , ')'"	^ month name, ' Fee'! !!MonthlyFee methodsFor: 'accessing' stamp: 'Anonymous 4/9/2020 14:57'!isMonthlyFee	^ true! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!MonthlyFee class	instanceVariableNames: ''!!MonthlyFee class methodsFor: 'instance creation' stamp: 'Anonymous 4/9/2020 05:31'!amount: anAmount month: aMonth	^ (self amount: anAmount) month: aMonth; yourself! !Object subclass: #Payment	instanceVariableNames: 'member fee paymentMethod amount commission datePaid'	classVariableNames: ''	package: 'Cooperative-Model'!!Payment methodsFor: 'accessing' stamp: 'Anonymous 4/11/2020 00:19'!printString	^ 'Payment($' , amount printString , ')'! !!Payment methodsFor: 'accessing' stamp: 'Anonymous 4/16/2020 18:00'!member: anObject	member ifNotNil: [ (member payments includes: self) ifTrue: [ member removePayment: self ] ].	member := anObject.	member ifNotNil: [ member addPayment: self	]		! !!Payment methodsFor: 'accessing' stamp: 'Anonymous 4/16/2020 18:04'!paymentMethod: anObject	paymentMethod ifNotNil: [ (paymentMethod payments includes: self) ifTrue: [ paymentMethod removePayment: self ] ].	paymentMethod := anObject.	paymentMethod ifNotNil: [ commission := paymentMethod commission. paymentMethod addPayment: self ]					  ifNil: [ commission := 0 ]! !!Payment methodsFor: 'accessing' stamp: 'Anonymous 4/10/2020 17:13'!member	^ member! !!Payment methodsFor: 'accessing' stamp: 'Anonymous 4/10/2020 17:13'!paymentMethod	^ paymentMethod! !!Payment methodsFor: 'accessing' stamp: 'Anonymous 4/10/2020 18:27'!amount	^ amount! !!Payment methodsFor: 'accessing' stamp: 'Anonymous 4/10/2020 18:27'!commission	^ commission! !!Payment methodsFor: 'accessing' stamp: 'Anonymous 4/12/2020 00:40'!datePaid: anObject	datePaid := anObject! !!Payment methodsFor: 'accessing' stamp: 'Anonymous 4/16/2020 18:03'!fee: anObject	fee ifNotNil: [ (fee payments includes: self) ifTrue: [ fee removePayment: self ] ].	fee := anObject.	fee ifNotNil: [ amount := fee amount. fee addPayment: self ]		 ifNil: [ amount := 0 ] 	 				! !!Payment methodsFor: 'accessing' stamp: 'Anonymous 4/10/2020 18:32'!amountAfterCommision	^ amount * ((100 - commission) / 100)! !!Payment methodsFor: 'accessing' stamp: 'Anonymous 4/10/2020 17:13'!fee	^ fee! !!Payment methodsFor: 'accessing' stamp: 'Anonymous 4/12/2020 00:40'!datePaid	^ datePaid! !!Payment methodsFor: 'initialization' stamp: 'Anonymous 4/16/2020 13:01'!initialize	amount := 0.	commission := 0.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Payment class	instanceVariableNames: ''!!Payment class methodsFor: 'instance creation' stamp: 'Anonymous 4/16/2020 12:29'!member: aMember fee: aFee paymentMethod: aPaymentMethod	^ (self new) member: aMember; fee: aFee; paymentMethod: aPaymentMethod; yourself! !Object subclass: #PaymentMethod	instanceVariableNames: 'name commission payments'	classVariableNames: ''	package: 'Cooperative-Model'!!PaymentMethod methodsFor: 'initialization' stamp: 'Anonymous 4/16/2020 18:14'!initialize	super initialize.	payments := Set new.! !!PaymentMethod methodsFor: 'accessing' stamp: 'Anonymous 4/10/2020 18:07'!commission	^ commission! !!PaymentMethod methodsFor: 'accessing' stamp: 'Anonymous 4/16/2020 18:11'!addPayment: aPayment	payments add: aPayment.	(aPayment paymentMethod == self) ifFalse: [ aPayment paymentMethod: self ]! !!PaymentMethod methodsFor: 'accessing' stamp: 'Anonymous 4/16/2020 18:11'!payments	^ payments! !!PaymentMethod methodsFor: 'accessing' stamp: 'Anonymous 4/11/2020 23:22'!commission: anObject	commission := anObject asNumber! !!PaymentMethod methodsFor: 'accessing' stamp: 'Anonymous 4/8/2020 00:31'!name	^ name! !!PaymentMethod methodsFor: 'accessing' stamp: 'Anonymous 4/11/2020 18:09'!printString	^ name! !!PaymentMethod methodsFor: 'accessing' stamp: 'Anonymous 4/8/2020 00:31'!name: anObject	name := anObject! !!PaymentMethod methodsFor: 'accessing' stamp: 'Anonymous 4/16/2020 18:11'!removePayment: aPayment	payments remove: aPayment.	(aPayment paymentMethod == self) ifTrue: [ aPayment paymentMethod: nil ]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PaymentMethod class	instanceVariableNames: ''!!PaymentMethod class methodsFor: 'instance creation' stamp: 'Anonymous 4/10/2020 18:16'!name: aName commission: aCommission	| paymentMethod |	paymentMethod := self new.	paymentMethod name: aName.	paymentMethod commission: aCommission.	^ paymentMethod! !Object subclass: #Person	instanceVariableNames: 'name dni'	classVariableNames: ''	package: 'Cooperative-Model'!!Person methodsFor: 'accessing' stamp: 'Anonymous 4/11/2020 00:16'!dni: anObject	dni := anObject! !!Person methodsFor: 'accessing' stamp: 'Anonymous 4/11/2020 00:16'!dni	^ dni! !!Person methodsFor: 'accessing' stamp: 'Anonymous 4/11/2020 00:16'!name	^ name! !!Person methodsFor: 'accessing' stamp: 'Anonymous 4/11/2020 00:16'!name: anObject	name := anObject! !!Person methodsFor: 'accessing' stamp: 'Anonymous 4/11/2020 00:17'!printString	^ name, '(', dni printString ,')'! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Person class	instanceVariableNames: ''!!Person class methodsFor: 'instance creation' stamp: 'Anonymous 4/16/2020 12:19'!name: aName dni: aDNI	^ (self new) name: aName; dni: aDNI; yourself! !Person subclass: #Member	instanceVariableNames: 'number phoneNumber responsibleOf payments'	classVariableNames: ''	package: 'Cooperative-Model'!!Member methodsFor: 'accessing' stamp: 'Anonymous 4/11/2020 21:57'!phoneNumber	^ phoneNumber! !!Member methodsFor: 'accessing' stamp: 'Anonymous 4/11/2020 21:57'!phoneNumber: anObject	phoneNumber := anObject! !!Member methodsFor: 'accessing' stamp: 'Anonymous 4/9/2020 23:09'!number: anObject	number := anObject! !!Member methodsFor: 'accessing' stamp: 'Anonymous 6/10/2020 17:41'!upToDate 	^ self enrollmentFeePaid and: ((payments select: [ :each | each fee isMonthlyFee ]) size >= (1 to: Month current index) size)! !!Member methodsFor: 'accessing' stamp: 'Anonymous 4/10/2020 16:07'!beNotResponsibleOf: aStudent	responsibleOf remove: aStudent.	(aStudent responsibles includes: self)		ifTrue: [ aStudent removeResponsible: self ]	! !!Member methodsFor: 'accessing' stamp: 'Anonymous 4/16/2020 18:05'!payments	^ payments! !!Member methodsFor: 'accessing' stamp: 'Anonymous 4/16/2020 18:06'!removePayment: aPayment	payments remove: aPayment.	(aPayment member == self) ifTrue: [ aPayment member: nil ]! !!Member methodsFor: 'accessing' stamp: 'Anonymous 4/9/2020 23:09'!number	^ number! !!Member methodsFor: 'accessing' stamp: 'Anonymous 4/9/2020 23:09'!responsibleOf	^ responsibleOf! !!Member methodsFor: 'accessing' stamp: 'Anonymous 4/10/2020 16:07'!beResponsibleOf: aStudent	responsibleOf add: aStudent.	(aStudent responsibles includes: self)		ifFalse: [ aStudent addResponsible: self ]	! !!Member methodsFor: 'accessing' stamp: 'Anonymous 4/16/2020 18:06'!addPayment: aPayment	payments add: aPayment.	(aPayment member == self) ifFalse: [ aPayment member: self ]! !!Member methodsFor: 'initialization' stamp: 'Anonymous 4/16/2020 18:12'!initialize	super initialize.	responsibleOf := Set new.	payments := Set new.! !!Member methodsFor: 'private' stamp: 'Anonymous 4/12/2020 04:19'!enrollmentFeePaid	^ self payments anySatisfy: [ :e | e fee isEnrollmentFee ]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Member class	instanceVariableNames: ''!!Member class methodsFor: 'instance creation' stamp: 'Anonymous 4/16/2020 12:21'!name: aName dni: aDNI phoneNumber: aPhoneNumber	^ (self name: aName dni: aDNI) phoneNumber: aPhoneNumber; yourself! !Person subclass: #Student	instanceVariableNames: 'grade division responsibles'	classVariableNames: ''	package: 'Cooperative-Model'!!Student methodsFor: 'accessing' stamp: 'Anonymous 4/9/2020 17:09'!division	^ division! !!Student methodsFor: 'accessing' stamp: 'Anonymous 4/9/2020 17:09'!division: anObject	division := anObject! !!Student methodsFor: 'accessing' stamp: 'Anonymous 4/9/2020 17:09'!grade: anObject	grade := anObject! !!Student methodsFor: 'accessing' stamp: 'Anonymous 4/9/2020 17:09'!grade	^ grade! !!Student methodsFor: 'accessing' stamp: 'Anonymous 4/10/2020 15:49'!responsibles	^ responsibles! !!Student methodsFor: 'accessing' stamp: 'Anonymous 4/10/2020 15:53'!addResponsible: aMember	responsibles add: aMember.	(aMember responsibleOf includes: self)		ifFalse: [ aMember beResponsibleOf: self ]! !!Student methodsFor: 'accessing' stamp: 'Anonymous 4/10/2020 16:02'!removeResponsible: aMember	responsibles remove: aMember.	(aMember responsibleOf includes: self)		ifTrue: [ aMember beNotResponsibleOf: self ]! !!Student methodsFor: 'initialization' stamp: 'Anonymous 4/10/2020 16:09'!initialize	super initialize.	responsibles := Set new! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Student class	instanceVariableNames: ''!!Student class methodsFor: 'instance creation' stamp: 'Anonymous 4/16/2020 12:23'!name: aName dni: aDNI grade: aGrade division: aDivision	^ (self name: aName dni: aDNI) grade: aGrade; division: aDivision; yourself! !