WAComponent subclass: #CooperativeComponent	instanceVariableNames: 'cooperative myhtml'	classVariableNames: ''	package: 'Cooperative-UI'!!CooperativeComponent methodsFor: 'rendering' stamp: 'Anonymous 4/9/2020 23:46'!createFee: feeClass	| aFee |	aFee := feeClass new.	self updateFee: aFee.	cooperative newFee: aFee ! !!CooperativeComponent methodsFor: 'rendering' stamp: 'Anonymous 4/11/2020 01:11'!showFee: aFee	self call: ((FeeDetailComponent cooperative: cooperative) fee: aFee)! !!CooperativeComponent methodsFor: 'rendering' stamp: 'Anonymous 4/9/2020 22:50'!importStudents	self call: (StudentImportComponent cooperative: cooperative).! !!CooperativeComponent methodsFor: 'rendering' stamp: 'Anonymous 4/11/2020 06:43'!showStudent: aStudent	self call: ((StudentDetailComponent cooperative: cooperative) student: aStudent)! !!CooperativeComponent methodsFor: 'rendering' stamp: 'Anonymous 4/11/2020 01:02'!showPayments: aPaymentCollection	self call: (PaymentListComponent cooperative: cooperative)! !!CooperativeComponent methodsFor: 'rendering' stamp: 'Anonymous 4/11/2020 21:13'!updateFee: aFee	self call: ((FeeEditorComponent cooperative: cooperative) fee: aFee)! !!CooperativeComponent methodsFor: 'rendering' stamp: 'Anonymous 4/11/2020 01:00'!showMembers: aMemberCollection	self call: (MemberListComponent cooperative: cooperative)! !!CooperativeComponent methodsFor: 'rendering' stamp: 'Anonymous 4/11/2020 00:26'!createPayment	| aPayment |	aPayment := Payment new.	self updatePayment: aPayment.	cooperative newPayment: aPayment! !!CooperativeComponent methodsFor: 'rendering' stamp: 'Anonymous 4/11/2020 01:00'!showFees: aFeeCollection	self call: (FeeListComponent cooperative: cooperative)! !!CooperativeComponent methodsFor: 'rendering' stamp: 'Anonymous 4/11/2020 21:14'!updatePayment: aPayment	self call: ((PaymentEditorComponent cooperative: cooperative) payment: aPayment)! !!CooperativeComponent methodsFor: 'rendering' stamp: 'Anonymous 4/11/2020 04:12'!renderContentOn: html	myhtml := MyHTMLCanvas on: html.	html div		class: 'container';		with: [			self renderNavBarOn: html.			self renderChildrenOn: html		]! !!CooperativeComponent methodsFor: 'rendering' stamp: 'Anonymous 4/10/2020 18:16'!createPaymentMethod	| aPaymentMethod |	aPaymentMethod := PaymentMethod name: '' commission: 0.	self updatePaymentMethod: aPaymentMethod.	cooperative newPaymentMethod: aPaymentMethod ! !!CooperativeComponent methodsFor: 'rendering' stamp: 'Anonymous 4/11/2020 01:11'!showPaymentMethod: aPaymentMethod	self call: ((PaymentMethodDetailComponent cooperative: cooperative) paymentMethod: aPaymentMethod)! !!CooperativeComponent methodsFor: 'rendering' stamp: 'Anonymous 4/11/2020 01:10'!showMember: aMember	self call: ((MemberDetailComponent cooperative: cooperative) member: aMember)! !!CooperativeComponent methodsFor: 'rendering' stamp: 'Anonymous 4/9/2020 05:41'!months	^ (OrderedCollection new)		addLast: Month january;		addLast: Month february;		addLast: Month march;		addLast: Month april;		addLast: Month may;		addLast: Month june ;		addLast: Month july;		addLast: Month august;		addLast: Month september;		addLast: Month october;		addLast: Month november;		addLast: Month december;		yourself! !!CooperativeComponent methodsFor: 'rendering' stamp: 'Anonymous 4/11/2020 21:14'!updateMember: aMember	self call: ((MemberEditorComponent cooperative: cooperative) member: aMember)! !!CooperativeComponent methodsFor: 'rendering' stamp: 'Anonymous 4/11/2020 01:01'!showStudents: aStudentCollection	self call: (StudentListComponent cooperative: cooperative)! !!CooperativeComponent methodsFor: 'rendering' stamp: 'Anonymous 4/11/2020 01:52'!renderRowOn: html with: aCollection	html div class: 'row'; with: [		aCollection do: [ :each | html div class: 'column'; with: each ]		]	! !!CooperativeComponent methodsFor: 'rendering' stamp: 'Anonymous 4/8/2020 22:54'!renderChildrenOn: html	self subclassResponsibility! !!CooperativeComponent methodsFor: 'rendering' stamp: 'Anonymous 4/9/2020 23:46'!createMember	| aMember |	aMember := Member new.	self updateMember: aMember.	cooperative newMember: aMember ! !!CooperativeComponent methodsFor: 'rendering' stamp: 'Anonymous 4/11/2020 01:01'!showPaymentMethods: aPaymentMethodCollection	self call: (PaymentMethodListComponent cooperative: cooperative)! !!CooperativeComponent methodsFor: 'rendering' stamp: 'Anonymous 4/11/2020 21:15'!updatePaymentMethod: aPaymentMethod	self call: ((PaymentMethodEditorComponent cooperative: cooperative) paymentMethod: aPaymentMethod)! !!CooperativeComponent methodsFor: 'rendering' stamp: 'Anonymous 4/8/2020 21:48'!cooperative: anObject	cooperative := anObject! !!CooperativeComponent methodsFor: 'rendering' stamp: 'Anonymous 4/10/2020 17:26'!renderNavBarOn: html	html div		class: 'navbar';		with: [ 			html unorderedList class: 'menu';				with: [					html listItem with: [ html anchor callback: [ self call: (CooperativeHomeComponent cooperative: cooperative) ]; with: 'Home' ].					html listItem with: [ html anchor callback: [ self call: (self showMembers: cooperative members) ]; with: 'Members' ].					html listItem with: [ html anchor callback: [ self call: (self showStudents: cooperative students) ]; with: 'Students' ].					html listItem with: [ html anchor callback: [ self call: (self showPaymentMethods: cooperative paymentMethods) ]; with: 'Payment Methods' ].					html listItem with: [ html anchor callback: [ self call: (self showFees: cooperative fees) ]; with: 'Fees' ].					html listItem with: [ html anchor callback: [ self call: (self showPayments: cooperative payments) ]; with: 'Payments' ].				]		].	html horizontalRule.	! !!CooperativeComponent methodsFor: 'rendering' stamp: 'Anonymous 4/11/2020 06:52'!showPayment: aPayment	self call: ((PaymentDetailComponent cooperative: cooperative) payment: aPayment)! !!CooperativeComponent methodsFor: 'rendering' stamp: 'Anonymous 4/12/2020 02:07'!style"milligram from: https://milligram.io""navbar from: https://gist.github.com/primaryobjects/5a86955d0419d64ae7f5c401bb704983"	^'/*!! * Milligram v1.3.0 * https://milligram.github.io * * Copyright (c) 2017 CJ Patoilo * Licensed under the MIT license */*,*:after,*:before{box-sizing:inherit}html{box-sizing:border-box;font-size:62.5%}body{color:#606c76;font-family:"Roboto", "Helvetica Neue", "Helvetica", "Arial", sans-serif;font-size:1.6em;font-weight:300;letter-spacing:.01em;line-height:1.6}blockquote{border-left:0.3rem solid #d1d1d1;margin-left:0;margin-right:0;padding:1rem 1.5rem}blockquote *:last-child{margin-bottom:0}.button,button,input[type="button"],input[type="reset"],input[type="submit"]{background-color:#9b4dca;border:0.1rem solid #9b4dca;border-radius:.4rem;color:#fff;cursor:pointer;display:inline-block;font-size:1.1rem;font-weight:700;height:3.8rem;letter-spacing:.1rem;line-height:3.8rem;padding:0 3.0rem;text-align:center;text-decoration:none;text-transform:uppercase;white-space:nowrap}.button:focus,.button:hover,button:focus,button:hover,input[type="button"]:focus,input[type="button"]:hover,input[type="reset"]:focus,input[type="reset"]:hover,input[type="submit"]:focus,input[type="submit"]:hover{background-color:#606c76;border-color:#606c76;color:#fff;outline:0}.button[disabled],button[disabled],input[type="button"][disabled],input[type="reset"][disabled],input[type="submit"][disabled]{cursor:default;opacity:.5}.button[disabled]:focus,.button[disabled]:hover,button[disabled]:focus,button[disabled]:hover,input[type="button"][disabled]:focus,input[type="button"][disabled]:hover,input[type="reset"][disabled]:focus,input[type="reset"][disabled]:hover,input[type="submit"][disabled]:focus,input[type="submit"][disabled]:hover{background-color:#9b4dca;border-color:#9b4dca}.button.button-outline,button.button-outline,input[type="button"].button-outline,input[type="reset"].button-outline,input[type="submit"].button-outline{background-color:transparent;color:#9b4dca}.button.button-outline:focus,.button.button-outline:hover,button.button-outline:focus,button.button-outline:hover,input[type="button"].button-outline:focus,input[type="button"].button-outline:hover,input[type="reset"].button-outline:focus,input[type="reset"].button-outline:hover,input[type="submit"].button-outline:focus,input[type="submit"].button-outline:hover{background-color:transparent;border-color:#606c76;color:#606c76}.button.button-outline[disabled]:focus,.button.button-outline[disabled]:hover,button.button-outline[disabled]:focus,button.button-outline[disabled]:hover,input[type="button"].button-outline[disabled]:focus,input[type="button"].button-outline[disabled]:hover,input[type="reset"].button-outline[disabled]:focus,input[type="reset"].button-outline[disabled]:hover,input[type="submit"].button-outline[disabled]:focus,input[type="submit"].button-outline[disabled]:hover{border-color:inherit;color:#9b4dca}.button.button-clear,button.button-clear,input[type="button"].button-clear,input[type="reset"].button-clear,input[type="submit"].button-clear{background-color:transparent;border-color:transparent;color:#9b4dca}.button.button-clear:focus,.button.button-clear:hover,button.button-clear:focus,button.button-clear:hover,input[type="button"].button-clear:focus,input[type="button"].button-clear:hover,input[type="reset"].button-clear:focus,input[type="reset"].button-clear:hover,input[type="submit"].button-clear:focus,input[type="submit"].button-clear:hover{background-color:transparent;border-color:transparent;color:#606c76}.button.button-clear[disabled]:focus,.button.button-clear[disabled]:hover,button.button-clear[disabled]:focus,button.button-clear[disabled]:hover,input[type="button"].button-clear[disabled]:focus,input[type="button"].button-clear[disabled]:hover,input[type="reset"].button-clear[disabled]:focus,input[type="reset"].button-clear[disabled]:hover,input[type="submit"].button-clear[disabled]:focus,input[type="submit"].button-clear[disabled]:hover{color:#9b4dca}code{background:#f4f5f6;border-radius:.4rem;font-size:86%;margin:0 .2rem;padding:.2rem .5rem;white-space:nowrap}pre{background:#f4f5f6;border-left:0.3rem solid #9b4dca;overflow-y:hidden}pre>code{border-radius:0;display:block;padding:1rem 1.5rem;white-space:pre}hr{border:0;border-top:0.1rem solid #f4f5f6;margin:3.0rem 0}input[type="email"],input[type="number"],input[type="password"],input[type="search"],input[type="tel"],input[type="text"],input[type="url"],textarea,select{-webkit-appearance:none;-moz-appearance:none;appearance:none;background-color:transparent;border:0.1rem solid #d1d1d1;border-radius:.4rem;box-shadow:none;box-sizing:inherit;height:3.8rem;padding:.6rem 1.0rem;width:100%}input[type="email"]:focus,input[type="number"]:focus,input[type="password"]:focus,input[type="search"]:focus,input[type="tel"]:focus,input[type="text"]:focus,input[type="url"]:focus,textarea:focus,select:focus{border-color:#9b4dca;outline:0}select{background:url("data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" height="14" viewBox="0 0 29 14" width="29"><path fill="#d1d1d1" d="M9.37727 3.625l5.08154 6.93523L19.54036 3.625"/></svg>") center right no-repeat;padding-right:3.0rem}select:focus{background-image:url("data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" height="14" viewBox="0 0 29 14" width="29"><path fill="#9b4dca" d="M9.37727 3.625l5.08154 6.93523L19.54036 3.625"/></svg>")}textarea{min-height:6.5rem}label,legend{display:block;font-size:1.6rem;font-weight:700;margin-bottom:.5rem}fieldset{border-width:0;padding:0}input[type="checkbox"],input[type="radio"]{display:inline}.label-inline{display:inline-block;font-weight:normal;margin-left:.5rem}.container{margin:0 auto;max-width:112.0rem;padding:0 2.0rem;position:relative;width:100%}.row{display:flex;flex-direction:column;padding:0;width:100%}.row.row-no-padding{padding:0}.row.row-no-padding>.column{padding:0}.row.row-wrap{flex-wrap:wrap}.row.row-top{align-items:flex-start}.row.row-bottom{align-items:flex-end}.row.row-center{align-items:center}.row.row-stretch{align-items:stretch}.row.row-baseline{align-items:baseline}.row .column{display:block;flex:1 1 auto;margin-left:0;max-width:100%;width:100%}.row .column.column-offset-10{margin-left:10%}.row .column.column-offset-20{margin-left:20%}.row .column.column-offset-25{margin-left:25%}.row .column.column-offset-33,.row .column.column-offset-34{margin-left:33.3333%}.row .column.column-offset-50{margin-left:50%}.row .column.column-offset-66,.row .column.column-offset-67{margin-left:66.6666%}.row .column.column-offset-75{margin-left:75%}.row .column.column-offset-80{margin-left:80%}.row .column.column-offset-90{margin-left:90%}.row .column.column-10{flex:0 0 10%;max-width:10%}.row .column.column-20{flex:0 0 20%;max-width:20%}.row .column.column-25{flex:0 0 25%;max-width:25%}.row .column.column-33,.row .column.column-34{flex:0 0 33.3333%;max-width:33.3333%}.row .column.column-40{flex:0 0 40%;max-width:40%}.row .column.column-50{flex:0 0 50%;max-width:50%}.row .column.column-60{flex:0 0 60%;max-width:60%}.row .column.column-66,.row .column.column-67{flex:0 0 66.6666%;max-width:66.6666%}.row .column.column-75{flex:0 0 75%;max-width:75%}.row .column.column-80{flex:0 0 80%;max-width:80%}.row .column.column-90{flex:0 0 90%;max-width:90%}.row .column .column-top{align-self:flex-start}.row .column .column-bottom{align-self:flex-end}.row .column .column-center{-ms-grid-row-align:center;align-self:center}@media (min-width: 40rem){.row{flex-direction:row;margin-left:-1.0rem;width:calc(100% + 2.0rem)}.row .column{margin-bottom:inherit;padding:0 1.0rem}}a{color:#9b4dca;text-decoration:none}a:focus,a:hover{color:#606c76}dl,ol,ul{list-style:none;margin-top:0;padding-left:0}dl dl,dl ol,dl ul,ol dl,ol ol,ol ul,ul dl,ul ol,ul ul{font-size:90%;margin:1.5rem 0 1.5rem 3.0rem}ol{list-style:decimal inside}ul{list-style:circle inside}.button,button,dd,dt,li{margin-bottom:1.0rem}fieldset,input,select,textarea{margin-bottom:1.5rem}blockquote,dl,figure,form,ol,p,pre,table,ul{margin-bottom:2.5rem}table{border-spacing:0;width:100%}td,th{border-bottom:0.1rem solid #e1e1e1;padding:1.2rem 1.5rem;text-align:left}td:first-child,th:first-child{padding-left:0}td:last-child,th:last-child{padding-right:0}b,strong{font-weight:bold}p{margin-top:0}h1,h2,h3,h4,h5,h6{font-weight:300;letter-spacing:-.1rem;margin-bottom:2.0rem;margin-top:0}h1{font-size:4.6rem;line-height:1.2}h2{font-size:3.6rem;line-height:1.25}h3{font-size:2.8rem;line-height:1.3}h4{font-size:2.2rem;letter-spacing:-.08rem;line-height:1.35}h5{font-size:1.8rem;letter-spacing:-.05rem;line-height:1.5}h6{font-size:1.6rem;letter-spacing:0;line-height:1.4}img{max-width:100%}.clearfix:after{clear:both;content:" ";display:table}.float-left{float:left}.float-right{float:right}/*# sourceMappingURL=milligram.min.css.map *//*!! * NavBar *  * https://gist.github.com/primaryobjects/5a86955d0419d64ae7f5c401bb704983 */.navbar {  margin-bottom: 10px;}.navbar ul {    list-style-type: none;    margin: 0;    padding: 0;    overflow: hidden;    background-color: #606c76;}.navbar li {    float: left;    margin-bottom: 0;}.navbar li a {    display: block;    color: white;    text-align: center;    padding: 14px 16px;    text-decoration: none;}.navbar li a:hover {    background-color: #ab5dda;}'! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CooperativeComponent class	instanceVariableNames: ''!!CooperativeComponent class methodsFor: 'instance creation' stamp: 'Anonymous 4/8/2020 21:53'!cooperative: aCooperative	^ (self new) cooperative: aCooperative; yourself! !CooperativeComponent subclass: #CooperativeHomeComponent	instanceVariableNames: 'paidFeesMember calculateIncomeStartDate calculateIncomeEndDate listUpToDateMembers'	classVariableNames: ''	package: 'Cooperative-UI'!!CooperativeHomeComponent methodsFor: 'accessing' stamp: 'Anonymous 4/12/2020 02:14'!calculateIncomeStartDate	^ calculateIncomeStartDate! !!CooperativeHomeComponent methodsFor: 'accessing' stamp: 'Anonymous 4/12/2020 02:14'!calculateIncomeStartDate: anObject	calculateIncomeStartDate := anObject asDate! !!CooperativeHomeComponent methodsFor: 'accessing' stamp: 'Anonymous 4/12/2020 01:21'!paidFeesMember: anObject	paidFeesMember := anObject! !!CooperativeHomeComponent methodsFor: 'accessing' stamp: 'Anonymous 4/12/2020 02:14'!calculateIncomeEndDate: anObject	calculateIncomeEndDate := anObject asDate! !!CooperativeHomeComponent methodsFor: 'accessing' stamp: 'Anonymous 4/12/2020 01:21'!paidFeesMember	^ paidFeesMember! !!CooperativeHomeComponent methodsFor: 'accessing' stamp: 'Anonymous 4/12/2020 02:14'!calculateIncomeEndDate	^ calculateIncomeEndDate! !!CooperativeHomeComponent methodsFor: 'rendering' stamp: 'Anonymous 4/12/2020 03:13'!renderChildrenOn: html	html heading: 'Calculate Income'.	html form: [		html label: 'Start date'.		html textInput type: 'date'; on: #calculateIncomeStartDate of: self; value: (Date today onPreviousMonth printFormat: #(3 2 1 $- 1 1 2)). "default value only works if: YYYY-MM-DD"		html label: 'End date'.		html textInput type: 'date'; on: #calculateIncomeEndDate of: self; value: (Date today printFormat: #(3 2 1 $- 1 1 2)). "default value only works if: YYYY-MM-DD"		html break.		html submitButton	].	(calculateIncomeStartDate isNotNil and: calculateIncomeEndDate isNotNil) ifTrue: [		html label: 'Income between ', calculateIncomeStartDate asString,						' and: ', calculateIncomeEndDate asString,						' is: $', (cooperative calculateIncomeBetween: calculateIncomeStartDate and: calculateIncomeEndDate) asString	].	html horizontalRule.	html heading: 'Query Member Paid Fees'.	html form: [ 		html label: 'Member'. 		html select list: cooperative members; on: #paidFeesMember of: self.		html break.		html submitButton	].	(paidFeesMember) ifNotNil: [		myhtml tableFor: paidFeesMember payments withHeaders: { 			(ObjectTableHeader name: 'Payment') tdCallback: [ :e | self showPayment: e ].			(ObjectTableHeader name: 'Fee') tdSelector: #fee; tdCallback: [ :e | self showFee: e ]		}	].	html horizontalRule.		html heading: 'Query Up To Date Members'.	html form: [		html submitButton callback: [ listUpToDateMembers := 'true' ].	].	(listUpToDateMembers) ifNotNil: [		myhtml tableFor: cooperative upToDateMembers withHeaders: {			(ObjectTableHeader name: 'DNI') tdSelector: #dni; tdCallback: [ :e | self showMember: e ].			(ObjectTableHeader name: 'Name') tdSelector: #name.			(ObjectTableHeader name: 'Number') tdSelector: #number.			(ObjectTableHeader name: 'Phone Number') tdSelector: #phoneNumber.			(ObjectTableHeader name: 'Up To Date') tdSelector: #upToDate		}	].	html horizontalRule.! !WAComponent subclass: #CooperativeWebUI	instanceVariableNames: 'cooperative'	classVariableNames: ''	package: 'Cooperative-UI'!!CooperativeWebUI methodsFor: 'rendering' stamp: 'Anonymous 4/9/2020 00:04'!renderContentOn: html	html anchor		callback: [ self call: (CooperativeHomeComponent cooperative: cooperative) ];		with: 'Enter'.! !!CooperativeWebUI methodsFor: 'initialization' stamp: 'Anonymous 4/11/2020 21:58'!initialize.	super initialize.	(cooperative := Cooperative new)		"payment methods"		newPaymentMethod: (PaymentMethod name: 'kiosco' commission: 15);		newPaymentMethod: (PaymentMethod name: 'transferencia' commission: 0);		newPaymentMethod: (PaymentMethod name: 'pago facil' commission: 10);		"students"		newStudent: (Student new dni: 40000001; name: 'Jack Shephard'; grade: 1; division: 1);		newStudent: (Student new dni: 40000002; name: 'Kate Austen'; grade: 1; division: 1);		newStudent: (Student new dni: 40000003; name: 'James Ford'; grade: 1; division: 1);		newStudent: (Student new dni: 40000004; name: 'Juliet Burke'; grade: 1; division: 1);		newStudent: (Student new dni: 40000005; name: 'Claire Littleton'; grade: 1; division: 1);		"enrollment fees"		newFee: (EnrollmentFee amount: 200);		"monthly fees"		newFee: (MonthlyFee amount: 100 month: Month january);		newFee: (MonthlyFee amount: 100 month: Month february);		newFee: (MonthlyFee amount: 100 month: Month march);		newFee: (MonthlyFee amount: 100 month: Month april);		"members"		newMember: (Member new dni: 30000001; name: 'John Locke'; phoneNumber: '2215000001'; beResponsibleOf: (cooperative students detect: [ :each | each dni = 40000001 ]));		newMember: (Member new dni: 30000002; name: 'Sayid Jarrah'; phoneNumber: '2215000002'; beResponsibleOf: (cooperative students detect: [ :each | each dni = 40000002 ]));		newMember: (Member new dni: 30000003; name: 'Hugo Reyes'; phoneNumber: '2215000003'; beResponsibleOf: (cooperative students detect: [ :each | each dni = 40000003 ]));		newMember: (Member new dni: 30000004; name: 'Sun-Hwa Kwon'; phoneNumber: '2215000004'; beResponsibleOf: (cooperative students detect: [ :each | each dni = 40000004 ]));		newMember: (Member new dni: 30000005; name: 'Jin-Soo Kwon'; phoneNumber: '2215000005'; beResponsibleOf: (cooperative students detect: [ :each | each dni = 40000005 ]));		"payments"		newPayment: (Payment new member: (cooperative members any); fee: (cooperative fees any); paymentMethod: (cooperative paymentMethods any))! !CooperativeComponent subclass: #FeeDetailComponent	instanceVariableNames: 'fee'	classVariableNames: ''	package: 'Cooperative-UI'!!FeeDetailComponent methodsFor: 'rendering' stamp: 'Anonymous 4/12/2020 00:42'!renderChildrenOn: html	myhtml gridRow with: [ 		myhtml gridColumn with: [ html heading: 'Fee' ].		myhtml gridColumn with: [ html anchor class: 'button column'; callback: [ self updateFee: fee ]; with: 'Edit' ]	].		myhtml detailEntry: 'Amount' with: fee amount.	fee isMonthlyFee ifTrue: [		myhtml detailEntry: 'Month' with: fee month	].		html label: 'payments'.	myhtml tableFor: fee payments withHeaders: {		(ObjectTableHeader name: '') tdSelector: #printString; tdCallback: [ :e | self showPayment: e ].		(ObjectTableHeader name: 'Member') tdSelector: #member ; tdCallback: [ :e | self showMember: e ].		(ObjectTableHeader name: 'Payment Method') tdSelector: #paymentMethod; tdCallback: [ :e | self showPaymentMethod: e paymentMethod ].		(ObjectTableHeader name: 'Amount') tdSelector: #amount.		(ObjectTableHeader name: 'Commission (%)') tdSelector: #commission.		(ObjectTableHeader name: 'Date Paid') tdSelector: #datePaid	}! !!FeeDetailComponent methodsFor: 'accessing' stamp: 'Anonymous 4/11/2020 06:32'!fee: anObject	fee := anObject! !!FeeDetailComponent methodsFor: 'accessing' stamp: 'Anonymous 4/11/2020 06:32'!fee	^ fee! !CooperativeComponent subclass: #FeeEditorComponent	instanceVariableNames: 'fee'	classVariableNames: ''	package: 'Cooperative-UI'!!FeeEditorComponent methodsFor: 'rendering' stamp: 'Anonymous 4/10/2020 05:55'!renderChildrenOn: html	(fee isMonthlyFee) ifTrue: [  		html heading: 'Monthly Fee'.		html form: [ 			html text: 'amount: '.			html numberInput on: #amount of: fee.			html break.			html text: 'month: '.			html select list: self months; on: #month of: fee.			html break.			html submitButton callback: [ self save ]; value: 'Save'.		]	].	(fee isEnrollmentFee) ifTrue: [  		html heading: 'Enrollment Fee'.		html form: [			html text: 'amount: '.			html numberInput on: #amount of: fee.			html break.			html submitButton callback: [ self save ]; value: 'Save'.		]	]	! !!FeeEditorComponent methodsFor: 'accessing' stamp: 'Anonymous 4/9/2020 14:49'!fee: anObject	fee := anObject! !!FeeEditorComponent methodsFor: 'accessing' stamp: 'Anonymous 4/9/2020 06:09'!save	self answer.! !!FeeEditorComponent methodsFor: 'accessing' stamp: 'Anonymous 4/9/2020 14:49'!fee	^ fee! !CooperativeComponent subclass: #FeeListComponent	instanceVariableNames: 'fees'	classVariableNames: ''	package: 'Cooperative-UI'!!FeeListComponent methodsFor: 'rendering' stamp: 'Anonymous 4/11/2020 21:40'!renderChildrenOn: html	myhtml gridRow with: [ 		myhtml gridColumn with: [ html heading: 'Fees' ].		myhtml gridColumn with: [ html anchor class: 'button column'; callback: [ self createFee: MonthlyFee ]; with: 'New Monthly Fee' ].		myhtml gridColumn with: [ html anchor class: 'button column'; callback: [ self createFee: EnrollmentFee ]; with: 'New Enrollment Fee' ]	].	myhtml tableFor: cooperative fees withHeaders: {		(ObjectTableHeader name: 'Fee') tdCallback: [ :e | self showFee: e ].		(ObjectTableHeader name: 'Amount') tdSelector: #amount	}.! !CooperativeComponent subclass: #MemberDetailComponent	instanceVariableNames: 'member'	classVariableNames: ''	package: 'Cooperative-UI'!!MemberDetailComponent methodsFor: 'rendering' stamp: 'Anonymous 4/12/2020 00:43'!renderChildrenOn: html	myhtml gridRow with: [ 		myhtml gridColumn with: [ html heading: 'Member' ].		myhtml gridColumn with: [ html anchor class: 'button column'; callback: [ self updateMember: member ]; with: 'Edit' ].	].		myhtml detailEntry: 'Name' with: member name. 	myhtml detailEntry: 'DNI' with: member dni.	myhtml detailEntry: 'Number' with: member number.	myhtml detailEntry: 'Phone number' with: member phoneNumber.	myhtml detailEntry: 'Up To Date' with: member upToDate.	myhtml detailEntry: 'Responsible of' with: [ html unorderedList list: member responsibleOf; labels: [ :each | [ html anchor callback: [ self showStudent: each ]; with: each ] ] ].			html label: 'Payments'.	myhtml tableFor: member payments withHeaders: {		(ObjectTableHeader name: '') tdSelector: #printString; tdCallback: [ :e | self showPayment: e ].		(ObjectTableHeader name: 'Fee') tdSelector: #fee; tdCallback: [ :e | self showFee: e fee ].		(ObjectTableHeader name: 'Payment Method') tdSelector: #paymentMethod; tdCallback: [ :e | self showPaymentMethod: e paymentMethod ].		(ObjectTableHeader name: 'Amount') tdSelector: #amount.		(ObjectTableHeader name: 'Commission (%)') tdSelector: #commission.		(ObjectTableHeader name: 'Date Paid') tdSelector: #datePaid	}! !!MemberDetailComponent methodsFor: 'accessing' stamp: 'Anonymous 4/9/2020 23:43'!member	^ member! !!MemberDetailComponent methodsFor: 'accessing' stamp: 'Anonymous 4/9/2020 23:43'!member: anObject	member := anObject! !CooperativeComponent subclass: #MemberEditorComponent	instanceVariableNames: 'member'	classVariableNames: ''	package: 'Cooperative-UI'!!MemberEditorComponent methodsFor: 'rendering' stamp: 'Anonymous 4/11/2020 21:56'!renderChildrenOn: html	html heading: 'Member'.	html form with: [  		html label: 'DNI'.		html textInput on: #dni of: member.		html break.		html label: 'Name'.		html textInput on: #name of: member.		html break.		html label: 'Phone Number: '.		html textInput on: #phoneNumber of: member.		html break.		html label: 'Responsible of: '.		myhtml gridWith: member responsibleOf columns: 4 cellDo: [ :each |			html checkbox value: true; callback: [ :checked |	checked ifFalse: [ member beNotResponsibleOf: each ] ].			html text: each.		]. 		myhtml gridWith: (cooperative students difference: member responsibleOf) columns: 4 cellDo: [ :each |			html checkbox value: false; callback: [ :checked | checked ifTrue: [ member beResponsibleOf: each. ] ].			html text: each.		].		html submitButton callback: [ self save ]; value: 'Save'.	]! !!MemberEditorComponent methodsFor: 'accessing' stamp: 'Anonymous 4/9/2020 23:35'!member	^ member! !!MemberEditorComponent methodsFor: 'accessing' stamp: 'Anonymous 4/10/2020 04:25'!save	self answer! !!MemberEditorComponent methodsFor: 'accessing' stamp: 'Anonymous 4/9/2020 23:35'!member: anObject	member := anObject! !CooperativeComponent subclass: #MemberListComponent	instanceVariableNames: 'members'	classVariableNames: ''	package: 'Cooperative-UI'!!MemberListComponent methodsFor: 'rendering' stamp: 'Anonymous 4/11/2020 22:23'!renderChildrenOn: html	myhtml gridRow with: [ 		myhtml gridColumn with: [ html heading: 'Members' ].		myhtml gridColumn with: [ html anchor class: 'button column'; callback: [ self createMember ]; with: 'New Member' ].	].	myhtml tableFor: cooperative members withHeaders: {		(ObjectTableHeader name: 'DNI') tdSelector: #dni; tdCallback: [ :e | self showMember: e ].		(ObjectTableHeader name: 'Name') tdSelector: #name.		(ObjectTableHeader name: 'Number') tdSelector: #number.		(ObjectTableHeader name: 'Phone Number') tdSelector: #phoneNumber.		(ObjectTableHeader name: 'Up To Date') tdSelector: #upToDate	}! !WAComponent subclass: #MyHTMLCanvas	instanceVariableNames: 'html'	classVariableNames: ''	package: 'Cooperative-UI'!!MyHTMLCanvas methodsFor: 'accessing' stamp: 'Anonymous 4/11/2020 06:09'!tableFor: aCollection withHeaders: headers	html table: [ 		html tableHead: [ 			html tableRow with: [				headers do: [ :header | html tableHeading: (header headerName) ]			]					].		html tableBody: [			aCollection do: [ :each |				html tableRow with: [					headers do: [ :header |						html tableData with: (							header tdCallback								ifNil: [ header tdWith value: each ]								ifNotNil: [ [ html anchor callback: [ header tdCallback value: each ]; with: (header tdWith value: each) ] ]						)					]				]			]		]	]! !!MyHTMLCanvas methodsFor: 'accessing' stamp: 'Anonymous 4/11/2020 20:39'!gridRow	^ html div class: 'row'! !!MyHTMLCanvas methodsFor: 'accessing' stamp: 'Anonymous 4/11/2020 20:39'!gridColumn	^ html div class: 'column'! !!MyHTMLCanvas methodsFor: 'accessing' stamp: 'Anonymous 4/11/2020 04:10'!html: anObject	html := anObject! !!MyHTMLCanvas methodsFor: 'accessing' stamp: 'Anonymous 4/11/2020 20:40'!detailEntry: anEntry with: aBlock	self gridRow with: [ 		self gridColumn with: [ html label: anEntry ].		self gridColumn with: aBlock 	].	html break.! !!MyHTMLCanvas methodsFor: 'accessing' stamp: 'Anonymous 4/11/2020 20:43'!gridWith: aCollection columns: columns cellDo: aBlock	| size rows data |	aCollection ifNotEmpty: [		data := aCollection asOrderedCollection.		size := data size.		rows := (size / columns) ceiling.		0 to: rows do: [ :row |			self gridRow with: [				1 to: columns do: [ :column |					self gridColumn with: [ | index |						index := (row * columns) + column.						(index <= size)							ifTrue: [ | item |								item := data at: index.								aBlock value: item							]											]				]			]		]	]		! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!MyHTMLCanvas class	instanceVariableNames: ''!!MyHTMLCanvas class methodsFor: 'instance creation' stamp: 'Anonymous 4/11/2020 04:10'!on: anObject	^ (self new) html: anObject; yourself! !Object subclass: #ObjectTableHeader	instanceVariableNames: 'headerName tdWith tdCallback'	classVariableNames: ''	package: 'Cooperative-UI'!!ObjectTableHeader methodsFor: 'accessing' stamp: 'Anonymous 4/9/2020 03:20'!headerName: anObject	headerName := anObject! !!ObjectTableHeader methodsFor: 'accessing' stamp: 'Anonymous 4/11/2020 05:00'!tdWith	^ tdWith! !!ObjectTableHeader methodsFor: 'accessing' stamp: 'Anonymous 4/11/2020 06:01'!tdCallback	^ tdCallback! !!ObjectTableHeader methodsFor: 'accessing' stamp: 'Anonymous 4/11/2020 21:40'!initialize	tdWith := [ :e | e ]! !!ObjectTableHeader methodsFor: 'accessing' stamp: 'Anonymous 4/11/2020 06:01'!tdCallback: anObject	tdCallback := anObject! !!ObjectTableHeader methodsFor: 'accessing' stamp: 'Anonymous 4/11/2020 05:17'!tdSelector: aSelector	tdWith := [ :e | e perform: aSelector ]! !!ObjectTableHeader methodsFor: 'accessing' stamp: 'Anonymous 4/11/2020 05:00'!tdWith: anObject	tdWith := anObject! !!ObjectTableHeader methodsFor: 'accessing' stamp: 'Anonymous 4/9/2020 03:20'!headerName	^ headerName! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ObjectTableHeader class	instanceVariableNames: ''!!ObjectTableHeader class methodsFor: 'instance creation' stamp: 'Anonymous 4/11/2020 05:25'!name: headerName	^ (self new) headerName: headerName; yourself.! !CooperativeComponent subclass: #PaymentDetailComponent	instanceVariableNames: 'payment'	classVariableNames: ''	package: 'Cooperative-UI'!!PaymentDetailComponent methodsFor: 'accessing' stamp: 'Anonymous 4/11/2020 06:49'!payment	^ payment! !!PaymentDetailComponent methodsFor: 'accessing' stamp: 'Anonymous 4/11/2020 06:49'!payment: anObject	payment := anObject! !!PaymentDetailComponent methodsFor: 'rendering' stamp: 'Anonymous 4/12/2020 00:41'!renderChildrenOn: html		myhtml gridRow with: [ 		myhtml gridColumn with: [ html heading: 'Payment'. ].		myhtml gridColumn with: [ html anchor class: 'button column'; callback: [ self updatePayment: payment ]; with: 'Edit' ]	].		myhtml detailEntry: 'Member' with: [ html anchor callback: [ self showMember: payment member ]; with: payment member ].	myhtml detailEntry: 'Fee' with: [ html anchor callback: [ self showFee: payment fee ]; with: payment fee ].	myhtml detailEntry: 'Payment Method' with: [ html anchor callback: [ self showPaymentMethod: payment paymentMethod ]; with: payment paymentMethod ].	myhtml detailEntry: 'Amount' with: payment amount.	myhtml detailEntry: 'Commission' with: payment commission.	myhtml detailEntry: 'Amount after commission' with: payment amountAfterCommision.	myhtml detailEntry: 'Date Paid' with: payment datePaid.! !CooperativeComponent subclass: #PaymentEditorComponent	instanceVariableNames: 'member payment'	classVariableNames: ''	package: 'Cooperative-UI'!!PaymentEditorComponent methodsFor: 'accessing' stamp: 'Anonymous 4/11/2020 00:31'!save	payment member: member.	self answer! !!PaymentEditorComponent methodsFor: 'accessing' stamp: 'Anonymous 4/11/2020 00:30'!payment	^ payment! !!PaymentEditorComponent methodsFor: 'accessing' stamp: 'Anonymous 4/11/2020 00:30'!payment: anObject	payment := anObject! !!PaymentEditorComponent methodsFor: 'accessing' stamp: 'Anonymous 4/11/2020 00:30'!member: anObject	member := anObject! !!PaymentEditorComponent methodsFor: 'accessing' stamp: 'Anonymous 4/11/2020 00:30'!member	^ member! !!PaymentEditorComponent methodsFor: 'rendering' stamp: 'Anonymous 4/12/2020 00:23'!renderChildrenOn: html	" if provided use the payment method member "	member := member ifNil: [ payment member ]. 	html heading: 'Payment'.	html form: [		html text: 'member: '.		member			" select member "			ifNil: [				html select list: cooperative members; on: #member of: self.				html submitButton value: 'select' ]			" create payment "			ifNotNil: [				html select list: cooperative members; selected: member; on: #member of: self.				html break.				html text: 'fee: '.				html select list: cooperative fees; on: #fee of: payment.				html break.				html text: 'payment method: '.				html select list: cooperative paymentMethods; on: #paymentMethod of: payment.				html break.				html submitButton callback: [ self save ]; value: 'save' ]			]! !CooperativeComponent subclass: #PaymentListComponent	instanceVariableNames: 'payments'	classVariableNames: ''	package: 'Cooperative-UI'!!PaymentListComponent methodsFor: 'rendering' stamp: 'Anonymous 4/12/2020 00:42'!renderChildrenOn: html	myhtml gridRow with: [		myhtml gridColumn with: [  html heading: 'Payments'. ].		myhtml gridColumn with: [ html anchor class: 'button column'; callback: [ self createPayment ]; with: 'New Payment' ].	].	myhtml tableFor: cooperative payments withHeaders: {		(ObjectTableHeader name: 'Payment') tdSelector: #printString; tdCallback: [ :e | self showPayment: e ].		(ObjectTableHeader name: 'Member') tdSelector: #member; tdCallback: [ :e | self showMember: e member ].		(ObjectTableHeader name: 'Fee') tdSelector: #fee; tdCallback: [ :e | self showFee: e fee ].		(ObjectTableHeader name: 'Payment Method') tdWith: #paymentMethod; tdCallback: [ :e | self showPaymentMethod: e paymentMethod ].		(ObjectTableHeader name: 'Amount') tdSelector: #amount.		(ObjectTableHeader name: 'Commission (%)') tdSelector: #commission.		(ObjectTableHeader name: 'Date Paid') tdSelector: #datePaid	}. ! !CooperativeComponent subclass: #PaymentMethodDetailComponent	instanceVariableNames: 'paymentMethod'	classVariableNames: ''	package: 'Cooperative-UI'!!PaymentMethodDetailComponent methodsFor: 'accessing' stamp: 'Anonymous 4/9/2020 04:13'!paymentMethod: anObject	paymentMethod := anObject! !!PaymentMethodDetailComponent methodsFor: 'accessing' stamp: 'Anonymous 4/9/2020 04:13'!paymentMethod	^ paymentMethod! !!PaymentMethodDetailComponent methodsFor: 'rendering' stamp: 'Anonymous 4/12/2020 00:47'!renderChildrenOn: html	myhtml gridRow with: [		myhtml gridColumn with: [ html heading: 'Payment Method'. ].		myhtml gridColumn with: [ html anchor class: 'button column'; callback: [ self updatePaymentMethod: paymentMethod ]; with: 'Edit' ].	].		myhtml detailEntry: 'Name' with: paymentMethod name.	myhtml detailEntry: 'Commission (%)' with: paymentMethod commission.		html label: 'payments'.	myhtml tableFor: paymentMethod payments withHeaders: {		(ObjectTableHeader name: '') tdSelector: #printString; tdCallback: [ :e | self showPayment: e ].		(ObjectTableHeader name: 'Member') tdSelector: #member ; tdCallback: [ :e | self showMember: e member ].		(ObjectTableHeader name: 'Fee') tdSelector: #fee; tdCallback: [ :e | self showFee: e fee ].		(ObjectTableHeader name: 'Amount') tdSelector: #amount.		(ObjectTableHeader name: 'Commission (%)') tdSelector: #commission.		(ObjectTableHeader name: 'Date Paid') tdSelector: #datePaid	}! !CooperativeComponent subclass: #PaymentMethodEditorComponent	instanceVariableNames: 'paymentMethod'	classVariableNames: ''	package: 'Cooperative-UI'!!PaymentMethodEditorComponent methodsFor: 'accessing' stamp: 'Anonymous 4/9/2020 06:20'!save	self answer! !!PaymentMethodEditorComponent methodsFor: 'accessing' stamp: 'Anonymous 4/9/2020 04:49'!paymentMethod: aPaymentMethod	paymentMethod := aPaymentMethod! !!PaymentMethodEditorComponent methodsFor: 'accessing' stamp: 'Anonymous 4/8/2020 22:51'!paymentMethod	^ paymentMethod! !!PaymentMethodEditorComponent methodsFor: 'rendering' stamp: 'Anonymous 4/11/2020 23:09'!renderChildrenOn: html	html heading: 'Payment Method'.	html form: [ 		html text: 'name:'.		html textInput on: #name of: paymentMethod.		html break.		html text: 'commission:'.		html numberInput on: #commission of: paymentMethod.		html break.		html submitButton callback: [ self save ]; value: 'Save'.	]! !CooperativeComponent subclass: #PaymentMethodListComponent	instanceVariableNames: 'paymentMethods'	classVariableNames: ''	package: 'Cooperative-UI'!!PaymentMethodListComponent methodsFor: 'rendering' stamp: 'Anonymous 4/11/2020 20:38'!renderChildrenOn: html	myhtml gridRow with: [		myhtml gridColumn with: [  html heading: 'Payment Methods'. ].		myhtml gridColumn with: [ html anchor class: 'button column'; callback: [ self createPaymentMethod ]; with: 'New Payment Method' ].	].	myhtml tableFor: cooperative paymentMethods withHeaders: {		(ObjectTableHeader name: 'Name') tdSelector: #name; tdCallback: [ :e | self showPaymentMethod: e ].		(ObjectTableHeader name: 'Commission (%)') tdSelector: #commission.	}.! !CooperativeComponent subclass: #StudentDetailComponent	instanceVariableNames: 'student'	classVariableNames: ''	package: 'Cooperative-UI'!!StudentDetailComponent methodsFor: 'rendering' stamp: 'Anonymous 4/11/2020 20:32'!renderChildrenOn: html	html heading: 'Student'.		myhtml detailEntry: 'Name' with: student name. 	myhtml detailEntry: 'DNi' with: student dni.	myhtml detailEntry: 'Grade' with: student grade.	myhtml detailEntry: 'Division' with: student division.	myhtml detailEntry: 'Responsibles' with: [ html unorderedList list: student responsibles; labels: [ :each | [ html anchor callback: [ self showMember: each ]; with: each ] ] ]! !!StudentDetailComponent methodsFor: 'accessing' stamp: 'Anonymous 4/11/2020 06:41'!student	^ student! !!StudentDetailComponent methodsFor: 'accessing' stamp: 'Anonymous 4/11/2020 06:41'!student: anObject	student := anObject! !CooperativeComponent subclass: #StudentImportComponent	instanceVariableNames: 'stringCSV'	classVariableNames: ''	package: 'Cooperative-UI'!!StudentImportComponent methodsFor: 'accessing' stamp: 'Anonymous 4/12/2020 00:59'!stringCSV	^ stringCSV! !!StudentImportComponent methodsFor: 'accessing' stamp: 'Anonymous 4/12/2020 00:57'!save	| rowSeparator valueSeparator |	rowSeparator := Character cr.	valueSeparator := ';'.	(stringCSV) trim splitOn: rowSeparator do: [ :row |		| values |		values := row splitOn: valueSeparator.		(values size >= 4) ifTrue: [ 			cooperative newStudent: (Student new				name: (values at: 1) trim;				dni: (values at: 2) trim;				grade: (values at: 3) trim;				division: (values at: 4) trim			). 		]	].	self answer! !!StudentImportComponent methodsFor: 'accessing' stamp: 'Anonymous 4/12/2020 00:59'!stringCSV: anObject	stringCSV := anObject! !!StudentImportComponent methodsFor: 'rendering' stamp: 'Anonymous 4/12/2020 01:01'!renderChildrenOn: html	html heading: 'Import Students'.	html form: [		html label: 'CSV'.		html text: '(row separator: < new line > | valueSeparator < ; >)'.		html break.		html text: 'name;dni;grade;division'.		html textArea on: #stringCSV of: self.		html submitButton callback: [ self save ]; value: 'Save'.	]! !CooperativeComponent subclass: #StudentListComponent	instanceVariableNames: 'students'	classVariableNames: ''	package: 'Cooperative-UI'!!StudentListComponent methodsFor: 'rendering' stamp: 'Anonymous 4/11/2020 20:39'!renderChildrenOn: html	myhtml gridRow with: [		myhtml gridColumn with: [  html heading: 'Students'. ].		myhtml gridColumn with: [ html anchor class: 'button column'; callback: [ self importStudents ]; with: 'Import Students' ].	].	myhtml tableFor: cooperative students withHeaders: {		(ObjectTableHeader name: 'DNI') tdSelector: #dni; tdCallback: [ :e | self showStudent: e  ].		(ObjectTableHeader name: 'Name') tdSelector: #name.		(ObjectTableHeader name: 'Grade') tdSelector: #grade.		(ObjectTableHeader name: 'Division') tdSelector: #division.	}.! !